x <- 2
if (x > 4) {
print("Si este código funciona, está bien")
exemplary_computation <- 73*14
}
if (x > 4) {
print("Si este código funciona, está bien")
exemplary_computation <- 73*14
}
condicion <- if (x > 4) {
print("Si este código funciona, está bien")
exemplary_computation <- 73*14
}
if (x > 4) {
print("Si este código funciona, está bien")
exemplary_computation <- 73*14
}
if (x > 4) {
print("Si este código funciona, está bien")
exemplary_computation <- 73*14
}
x <- 5
if (x > 4) {
print("If code block reached, condition was true.")
exemplary_computation <- 73*14
}
x <- 2
if (x > 4) {
print("Si este código funciona, está bien")
exemplary_computation <- 73*14
}
x <- 5
if (x > 4) {
print("If code block reached, condition was true.")
exemplary_computation <- 73*14
}
x <- 3
if (x > 4) {
print("If code block reached, condition was true.")
exemplary_computation <- 73*14
} else {
print("Else code block reached, condition was false.")
exemplary_computation <- 37*41
}
x <- 2
if (x > 4) {
print("Si este código funciona, está bien")
exemplary_computation <- 73*14
}
x <- 2
if (x > 4) {
print("If code block reached, condition was true.")
exemplary_computation <- 73*14
}
x <- 5
if (x > 4) {
print("If code block reached, condition was true.")
exemplary_computation <- 73*14
}
x <- 3
if (x > 4) {
print("If code block reached, condition was true.")
exemplary_computation <- 73*14
} else {
print("Else code block reached, condition was false.")
exemplary_computation <- 37*41
}
x <- 2
y <- 3
if (x < y) {
print("First if code block reached, associated condition was true: y is greater than x.")
} else if (x > y) {
print("Second if code block reached, associated condition was true: x is greater than y.")
} else {
print("Else code block reached, none of the condition were true: x and y are equal.")
}
x <- 2
if (x > 4) {
print("If code block reached, condition was true.")
exemplary_computation <- 73*14
}
x <- 2
if (x > 4) {
print("If code block reached, condition was true.")
exemplary_computation <- 73*14
}
x <- 5
if (x > 4) {
print("If code block reached, condition was true.")
exemplary_computation <- 73*14
}
x <- 5
if (x > 4) {
print("If code block reached, condition was true.")
exemplary_computation <- 73*14
}
x <- 5
if (x > 4) {
print("If code block reached, condition was true.")
}
x <- 5
if (x > 4) {
print("If code block reached, condition was true.")
}
x <- 3
if (x > 4) {
print("If code block reached, condition was true.")
} else {
print("Else code block reached, condition was false.")
}
x <- 5
if (x > 4) {
print("Si la condicional es verdadera, entonces imprime")
}
x <- 3
if (x > 4) {
print("Si la condicional es verdadera, entonces imprime")
} else {
print("Si la condicional no es verdadera, entonces no")
}
x <- 3
if (x > 4) {
print("Si la condicional es verdadera, entonces imprime")
} else {
muestra <- x*4
print(muestra)
}
x <- 2
y <- 3
if (x < y) {
print("Si la primera condicional es verdadera, entonces imprime")
} else if (x > y) {
print("Si la segunda condicional es verdadera entonces imprime")
} else {
print("Si ninguna condicional es verdadera, entonces son iguales")
}
for (i in VECTOR) {
# do something with i but not necessarily
}
for (number in 1:10) {
print(number)
}
for (i in VECTOR) {
nuevo <- VECTOR*5
print(nuevo)
}
VECTOR <- c(2:5)
for (i in VECTOR) {
nuevo <- VECTOR*5
print(nuevo)
}
VECTOR
nuevo <- VECTOR*2
for (i in VECTOR) {
nuevo <- VECTOR*2
print(nuevo)
}
for (number in 1:10) {
print(number)
}
for (text in vector_of_texts) {
print(text)
}
vector_of_texts <- c("hello", "world", "in", "a", "for", "loop")
for (text in vector_of_texts) {
print(text)
}
for (cola in vector_of_texts) {
print(cola)
}
x <- 1
while (x < 11) {
print(x)
x <- x + 1
}
x <- 1
while (x < 11) {
x <- x + 1
print(x)
}
while (2 < 4) {print("hello word")}
x <- 1
while (x < 11) {
x <- x + 1
print(x)
}
fib <- c(0, 1, rep(NA, 38)) # initialize fib sequence with a vector (0, 1, NA, NA, NA, NA, ...)
fib
for (i in 3:40) {
fib[i] <- fib[i - 1] + fib[i - 2]
}
fib
# Crear una lista vacía
grades <- list()
# Loop over 5 estudiantes
for (i in 1:5) {
# Crear un data frame con datos de los estudiantes
student <- data.frame(id = i,
initial = sample(LETTERS, 1),
grade = runif(n = 1, min = 0, max = 100),
stringsAsFactors = FALSE)
grades[[i]] <- student
}
# Ahora tenemos una lista
class(grades)
# Podemos combinar esto con rbind
grades <- do.call(rbind, grades) # es posible también combinar filas
grades
times_2 <- function(x) {x * 2}
times_2(6)
times_2(1:5)
two_numbers <- function(x, y) {
my_sum <- x + y
my_product <- x * y
my_ratio <- x / y
return(c(my_sum, my_product, my_ratio))
}
two_numbers(4, 11.93)
my_function <- function(z) {
z <- 2*z
return(z)
}
z <- 10
# First output
my_function(z)
# Second outpiut
z
my_function <- function(z) {
z <- 2*z
return(z)
}
# First output
my_function(z)
z <- 10
# First output
my_function(z)
# Second outpiut
z
# Usando la ifelse para tener un valor absoluto
x <- -2
abs_x <- ifelse(x > 0, x, -x)
abs_x
# Industrial production data
ip_df <- read.csv("ip.csv")
ip_df
# Limpiar las columnas
colnames(ip_df) <- str_replace(colnames(ip_df), "X", "")
# Limpiar las columnas
colnames(ip_df) <- str_replace(colnames(ip_df), "X", "")
# Instalar los paquetes
#install.packages("tidyverse")
# Cargar los paquetes
library(tidyverse)
# Limpiar las columnas
colnames(ip_df) <- str_replace(colnames(ip_df), "X", "")
head(ip_df)
# Industrial production and unemployement data
ip_and_unemployment_df <- read.csv("ip_and_unemployment.csv")
head(ip_and_unemployment_df)
# Transformando la base normal en tibbles
ip <- as_tibble(ip_df)
ip_and_unemployment <- as_tibble(ip_and_unemployment_df)
ip
ip_and_unemployment
view(ip)
view(ip_and_unemployment)
View(ip)
exemplary_vector <- c(-42, -5, 17, 24, -34, 93, 18)
# Create a function which only returns negative elements in a vector
return_negative_elements <- function(x) {
return(x[x<0])
}
# Crear una funcion que solo retorna los elementos negativos de un vector
return_negative_elements <- function(x) {
return(x[x<0])
}
# Calcular la media
exemplary_vector %>%
return_negative_elements() %>%
mean()
# Calcular la media
exemplary_vector %>%
return_negative_elements()
ip_and_unemployment_wide %>%
filter(country == "uk") %>%
filter(ip == min(ip)) %>%
select(date, ip)
ip_and_unemployment_wide %>% filter(country == "uk")
# Instalar los paquetes
#install.packages("tidyverse")
# Cargar los paquetes
library(tidyverse)
# Industrial production data
ip_df <- read.csv("ip.csv")
# Limpiar las columnas
colnames(ip_df) <- str_replace(colnames(ip_df), "X", "")
head(ip_df)
# Industrial production and unemployement data
ip_and_unemployment_df <- read.csv("ip_and_unemployment.csv")
head(ip_and_unemployment_df)
# Transformando la base normal en tibbles
ip <- as_tibble(ip_df)
ip_and_unemployment <- as_tibble(ip_and_unemployment_df)
ip
ip_and_unemployment
view(ip)
view(ip_and_unemployment)
exemplary_vector <- c(-42, -5, 17, 24, -34, 93, 18)
# Dos maneras de determinar un mismo resultado
max(exemplary_vector)
exemplary_vector %>% max()
# Crear una funcion que solo retorna los elementos negativos de un vector
return_negative_elements <- function(x) {
return(x[x<0])
}
# Calcular la media
exemplary_vector %>%
return_negative_elements() %>%
mean()
ip
ip_long <- pivot_longer(ip, cols = colnames(ip)[2:length(colnames(ip))],
names_to = "date", values_to = "ip")
ip_long
ip_long <- ip %>% pivot_longer(cols = colnames(ip)[2:length(colnames(ip))],
names_to = "date", values_to = "ip")
ip_long
ip_and_unemployment
ip_and_unemployment_wide <- ip_and_unemployment %>%
pivot_wider(names_from = series, values_from = value)
ip_and_unemployment_wide
ip_and_unemployment_wide %>% select(date, ip)
ip_and_unemployment_wide %>% select(-date)
ip_and_unemployment_wide %>% filter(country == "uk")
ip_and_unemployment_wide %>% filter(country %in% c("uk", "france"))
ip_and_unemployment_wide %>%
filter(country == "uk") %>%
filter(ip == min(ip)) %>%
select(date, ip)
ip_and_unemployment_wide %>%
filter(country == "uk") %>%
filter(ip == max(ip)) %>%
select(date, ip)
ip_and_unemployment_wide %>%
filter(country == "uk") %>%
filter(ip == min(ip)) %>%
select(date, ip)
ip_and_unemployment_wide %>%
filter(country == "us") %>%
filter(unemployment == max(unemployment)) %>%
select(date, unemployment)
ip_and_unemployment_wide %>%
filter(country == "us") %>%
filter(date == "01.03.2020") %>%
select(date, unemployment)
ip_and_unemployment_wide %>%
filter(country == "uk") %>%
select(ip) %>%
drop_na() %>%
summarise(uk_ip_mean = mean(ip), uk_ip_sd = sd(ip), uk_observations = n())
